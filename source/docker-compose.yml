version: '3.8'

services:

  # Service for the user-service
  user-service:
    build: # Build the image from the Dockerfile
      context: ./  # This sets the root directory as the context
      dockerfile: ./services/user-service/Dockerfile
   
    container_name: user-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started

    environment:
      POSTGRES_URI: postgres://user:password@postgres:5432/usersdb  # Connection URI
    ports:
      - "8080:8080"  # Expose app on port 8080
    volumes:
      - ./services/user-service:/usr/src/app
      - ./services/user-service/index.js:/usr/src/app/index.js  # Mount the index.js file to the container

    networks:
      - app_network
    restart: always

  student-service:
    build: # Build the image from the Dockerfile
      context: ./  # This sets the root directory as the context
      dockerfile: ./services/student-service/Dockerfile

    container_name: student-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
      user-service:
        condition: service_started
    environment:
      POSTGRES_URI: postgres://user:password@postgres:5432/studentsdb  # Connection URI
    ports:
      - "7070:7070"  # Expose app on port 7070
    volumes:
      - ./services/student-service:/usr/src/app
      - ./services/student-service/index.js:/usr/src/app/index.js  # Mount the index.js file to the container

    networks:
      - app_network
    restart: always

  course-service:
    build: # Build the image from the Dockerfile
      context: ./  # This sets the root directory as the context
      dockerfile: ./services/course-service/Dockerfile

    container_name: course-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
    environment:
      POSTGRES_URI: postgres://user:password@postgres:5432/coursesdb  # Connection URI
    ports:
      - "6060:6060"  # Expose app on port 6060
    volumes:
      - ./services/course-service:/usr/src/app
      - ./services/course-service/index.js:/usr/src/app/index.js  # Mount the index.js file to the container

    networks:
      - app_network
    restart: always
  

  # Service for the database
  postgres:
    image: postgres      
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user    # Database user
      POSTGRES_PASSWORD: password  # Database password
    ports:
      - "5432:5432"
    volumes:                        # To save the data in a persistent volume
      - pgdata:/var/lib/postgresql/data
      -  ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network  # Connect to the same network as the app

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # port for the management plugin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5


volumes:
  pgdata:
  rabbitmq_data:

networks:
  app_network:  # Define the network for communication between services
    driver: bridge

